// Code generated by MockGen. DO NOT EDIT.
// Source: s1/services/search.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	domain "github.com/IDarar/grpcservices/s1/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockS2 is a mock of S2 interface.
type MockS2 struct {
	ctrl     *gomock.Controller
	recorder *MockS2MockRecorder
}

// MockS2MockRecorder is the mock recorder for MockS2.
type MockS2MockRecorder struct {
	mock *MockS2
}

// NewMockS2 creates a new mock instance.
func NewMockS2(ctrl *gomock.Controller) *MockS2 {
	mock := &MockS2{ctrl: ctrl}
	mock.recorder = &MockS2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS2) EXPECT() *MockS2MockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockS2) Search(ctx context.Context, keyword string) (domain.SearchResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, keyword)
	ret0, _ := ret[0].(domain.SearchResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockS2MockRecorder) Search(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockS2)(nil).Search), ctx, keyword)
}
